

DAA CODES 

1)Write a program non-recursive and recursive program to calculate Fibonacci numbers and  analyze their time and space complexity.

# Function for nth fibonacci number - Space Optimisation         (Non- Recursion)
# Taking 1st two  fibonacci numbers as 0 and 1
def fibonacci(n): 
    a = 0
    b = 1
    if n < 0:
         print("Incorrect input")
    elif n == 0:
         return a
    elif n == 1:
         return b
    else:
        for i in range(2, n+1): 
            c = a + b
            a = b
            b = c
        return b
# Driver Program
print(fibonacci(9))

---------------------------------------------------------------------------------
# Recursion
# recursive
def fibonacci_recursive(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    fib_sequence = fibonacci_recursive(n - 1)
    fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    return fib_sequence
n = 7  # Change this value to the desired number of Fibonacci numbers
fib_sequence = fibonacci_iterative(n)  # or use fibonacci_recursive(n) for the recursive version
print(fib_sequence)

#(Non- Recursion)
# non-recursive 
def fibonacci_iterative(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
 
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
    
    return fib_sequence
n = 7  # Change this value to the desired number of Fibonacci numbers
fib_sequence = fibonacci_iterative(n)  # or use fibonacci_recursive(n) for the recursive version
print(fib_sequence)
----------------------------------------------------------------------------------
EXPLAINATION
RECURSION
1. **Fibonacci Sequence**: The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones. It starts with 0 and 1, and then each subsequent number is the sum of the two before it.

2. **Recursive Function**: In this code, there is a function called `fibonacci_recursive`. It's a special kind of function that calls itself to solve a problem. This function calculates the Fibonacci sequence for a given number `n`.

3. **Base Cases**: The function has some rules for when to stop. If `n` is less than or equal to 0, it returns an empty list because there are no Fibonacci numbers to calculate. If `n` is 1, it returns a list with just one number, which is 0. If `n` is 2, it returns a list with two numbers, 0 and 1.

4. **Recursion**: For `n` greater than 2, the function calls itself with `n - 1` to calculate the Fibonacci sequence for a smaller `n`. It then takes the last two numbers from that sequence, adds them together, and appends the result to the sequence. This continues until it reaches the desired `n`.

5. **Printing the Sequence**: Finally, the code sets `n` to 7 and calls the `fibonacci_recursive` function with this value. It stores the resulting sequence in the variable `fib_sequence` and prints it. So, when you run the code, it will display the first 7 Fibonacci numbers.

In this way, the recursive function breaks down the problem of calculating Fibonacci numbers into smaller sub-problems until it reaches the base cases and then builds up the sequence from there.

NON RECURSION
Certainly! The code you provided calculates a sequence of Fibonacci numbers using an iterative (non-recursive) approach. Let me explain it in simple terms:

1. **Fibonacci Sequence**: The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones. It starts with 0 and 1, and then each subsequent number is the sum of the two before it.

2. **Iterative Approach**: Instead of using recursion (a function calling itself), this code uses a loop to calculate the Fibonacci sequence.

3. **Base Cases**: Similar to the recursive approach, the code defines some rules for when to stop. If `n` is less than or equal to 0, it returns an empty list because there are no Fibonacci numbers to calculate. If `n` is 1, it returns a list with just one number, which is 0.

4. **Iterative Calculation**: For `n` greater than 1, the code creates a list called `fib_sequence` with the first two Fibonacci numbers, 0 and 1. Then, it enters a loop that continues until the length of `fib_sequence` reaches the desired `n`.

5. **Building the Sequence**: Inside the loop, the code appends a new number to `fib_sequence`, which is the sum of the last two numbers in the list. It keeps doing this until it has calculated the first `n` Fibonacci numbers.

6. **Printing the Sequence**: Finally, the code sets `n` to 7, calls the `fibonacci_iterative` function with this value, and stores the resulting sequence in the variable `fib_sequence`. It then prints the sequence.

In this way, the code builds the Fibonacci sequence iteratively by adding the next number in the sequence as it goes, and it doesn't involve calling the function recursively.

#################################################################################################################################################

2)Write a program to implement Huffman Encoding using a greedy strategy

import heapq

class node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ""
    
    def __lt__(self, other):
        return self.freq < other.freq
    
def printNodes(node, val=""):
    newval = val + node.huff
    if node.left:
        printNodes(node.left, newval)
    if node.right:
        printNodes(node.right, newval)
    else:
        print(f"{node.symbol} -> {newval}")

chars = ["a", "b", "c", "d", "e", "f"]
freqs = [5, 9, 12, 13, 16, 45]
nodes = []

for i in range(len(chars)):
    heapq.heappush(nodes, node(freqs[i], chars[i]))

while len(nodes) > 1:
    left = heapq.heappop(nodes)
    right = heapq.heappop(nodes)
    left.huff = "0"
    right.huff = "1"
    newnode = node(left.freq + right.freq, left.symbol + right.symbol, left, right)
    heapq.heappush(nodes, newnode)

printNodes(nodes[0])

---------------------------

The code you provided is an implementation of the Huffman coding algorithm and a data structure for creating a Huffman tree. Let's break down the code and then explain what Huffman coding is:

1. **`node` Class**:
   - This class represents a node in a binary tree used for the Huffman coding algorithm.
   - Each node has attributes such as frequency (`freq`), symbol (`symbol`), left child (`left`), right child (`right`), and a Huffman code (`huff`).
   - The `__lt__` method is defined to enable comparison of nodes based on their frequencies. This is used for the min-heap data structure (implemented using the `heapq` module).

2. **`printNodes` Function**:
   - This function is used to print the Huffman codes for each symbol.
   - It recursively traverses the Huffman tree, building the code for each symbol and printing the symbol and its code.

3. **Creating Huffman Tree**:
   - A list of characters (`chars`) and their corresponding frequencies (`freqs`) is provided. These represent the characters in a text and their respective frequencies.
   - Initially, each character and its frequency are converted into a `node` object and added to a min-heap (`nodes`).
   - The min-heap is used to efficiently find the nodes with the lowest frequencies.

4. **Huffman Tree Construction**:
   - A while loop constructs the Huffman tree by merging nodes with the lowest frequencies.
   - In each iteration, the two nodes with the lowest frequencies are removed from the heap. Their `huff` attribute is set to "0" for the left node and "1" for the right node to indicate the path in the tree.
   - A new node is created by combining the left and right nodes, with the combined frequency and concatenated symbols.
   - This new node is added back to the min-heap.
   - The loop continues until only one node remains in the heap, which represents the root of the Huffman tree.

5. **Printing Huffman Codes**:
   - The `printNodes` function is called with the root of the Huffman tree (`nodes[0]`) to print the Huffman codes for each character.

**Huffman Coding**:
Huffman coding is a variable-length prefix coding algorithm used for data compression. It is used to encode characters in a message such that more frequent characters are assigned shorter codes, and less frequent characters are assigned longer codes. This results in efficient compression, especially for data with varying symbol frequencies.

Here's how Huffman coding works:
1. A frequency table is created to count the occurrence of each character in the input data.
2. A Huffman tree is constructed, where each leaf node represents a character and its frequency, and internal nodes represent combined frequencies.
3. The Huffman codes are assigned by traversing the tree: "0" for left branches and "1" for right branches.
4. The resulting Huffman codes are used to encode the input data efficiently.

Huffman coding is widely used in data compression algorithms like ZIP and JPEG for image compression. It allows for lossless compression by representing the data using shorter codes for more common elements and longer codes for less common ones.
Certainly! I'll explain how the Huffman codes for each letter were derived:

1. **"f"**: It has the code "0." In a Huffman tree, the character "f" is the leftmost leaf node, so it gets the shortest code, which is "0."

2. **"c"**: It has the code "100." In the Huffman tree, "c" is positioned in a way that you need to take the path "1" (right), "0" (left), "0" (left) to reach it. Hence, the code for "c" is "100."

3. **"d"**: It has the code "101." Similar to "c," "d" is positioned in the tree so that you take the path "1" (right), "0" (left), "1" (right) to reach it, resulting in the code "101."

4. **"a"**: It has the code "1100." In the tree, "a" is positioned such that you follow the path "1" (right), "1" (right), "0" (left), "0" (left) to reach it, giving the code "1100."

5. **"b"**: It has the code "1101." Like "a," "b" is positioned so that you take the path "1" (right), "1" (right), "0" (left), "1" (right) to reach it, resulting in the code "1101."

6. **"e"**: It has the code "111." "e" is the rightmost leaf node in the tree, so it gets the shortest path of "1" (right), "1" (right), "1" (right), giving it the code "111."

These codes are created by encoding the position of each character in the Huffman tree. Characters closer to the root have shorter codes, while characters deeper in the tree have longer codes. This variable-length prefix coding ensures efficient data compression, with more frequent characters having shorter codes and less frequent characters having longer codes.
         ROOT
       /     \
    e (111)    INTERNAL NODE
               /      \
          f (0)      INTERNAL NODE
                    /     \
              c (100)    INTERNAL NODE
                         /     \
                   d (101)   INTERNAL NODE
                            /      \
                      a (1100)    b (1101)
##########################################################################################################

3)Write a program to solve a fractional Knapsack problem using a greedy method.


# Structure for an item which stores weight and 
# corresponding   value of Item  ( MAMS CODE IN WHICH NO MAX KNAPSACK VALUE )
class Item:
    def __init__(self, profit, weight):
        self.profit = profit
        self.weight = weight

# Main greedy function to solve problem
def fractionalKnapsack(W, arr):
    # Sorting Item on basis of ratio
    arr.sort(key=lambda x: (x.profit/x.weight), reverse=True)

    # Result (value in Knapsack)
    finalvalue = 0.0

    # Looping through all Items
    for item in arr:
        # If adding Item won't overflow, add it completely
        if item.weight <= W:
            W -= item.weight
            finalvalue += item.profit
        # If we can't add current Item, add fractional part of it
        else:
            finalvalue += item.profit * W / item.weight
            break

    # Returning final value
    return finalvalue

# Driver Code
if __name__ == "__main__":
    W = 50
    arr = [Item(60, 10), Item(100, 20), Item(120, 30)]

    # Function call
    max_val = fractionalKnapsack(W, arr)
    print(max_val)


------------------------------------------------------------------

 #  knapsack code where we need to mention max knapsack value

 
class Item:
    def __init__(self, profit, weight):
        self.profit = profit
        self.weight = weight

def fractionalKnapsack(w, arr):
    arr.sort(key=lambda x: x.profit/x.weight, reverse=True)
    finalValue = 0.0
    for item in arr:
        if w >= item.weight:
            finalValue += item.profit
            w -= item.weight
        else:
            finalValue += item.profit * (w/item.weight)
            break
    return finalValue

if __name__ == "__main__":
    n = int(input("Enter number of items-\n"))
    arr = []
    for i in range(n):
        profit = int(input("Enter profit of item " + str(i + 1) + "-\n"))
        weight = int(input("Enter weight of item " + str(i + 1) + "-\n"))
        arr.append(Item(profit, weight))
    w = int(input("Enter capacity of knapsack-\n"))
    print("Maximum value in knapsack: ", fractionalKnapsack(w, arr))

------------------------------------------------------------------

This code is a Python implementation of a greedy algorithm for solving the fractional knapsack problem. Let's break it down in simple terms:

1. **Item Class**:
   - There's a class called `Item` that represents items that you can put in a knapsack. Each item has two attributes: `profit` (the value or benefit you get from the item) and `weight` (how much space or weight the item occupies in the knapsack).

2. **fractionalKnapsack Function**:
   - This is the main function that solves the fractional knapsack problem. It takes two parameters: `W` (the maximum weight the knapsack can carry) and `arr` (a list of items).
   - The `arr` parameter is a list of `Item` objects, which you want to sort and select items from to maximize the total profit.

3. **Sorting by Ratio**:
   - The items in the `arr` list are sorted in descending order based on the ratio of profit to weight. This means that items with a higher profit-to-weight ratio will come first in the list.

4. **Loop Through Items**:
   - The code then goes through each item in the sorted list, starting from the one with the highest ratio.
   - If the weight of the current item can fit into the knapsack without exceeding its capacity (`W`), the entire item is added to the knapsack. The `W` is reduced by the weight of the added item, and the profit of that item is added to the `finalvalue`.

5. **Fractional Parts**:
   - If the current item's weight is more than what's left in the knapsack, the code calculates the fractional part of the item that can be added to maximize profit. It adds a fraction of the item, based on how much weight capacity is left in the knapsack.

6. **Final Value**:
   - The `finalvalue` keeps track of the total profit achieved by selecting items from the list in a way that maximizes profit without exceeding the knapsack's weight limit.

7. **Driver Code**:
   - In the driver code, a knapsack with a maximum weight capacity of 50 units is considered.
   - A list of items with their respective profits and weights is provided.
   - The `fractionalKnapsack` function is called with the knapsack's weight capacity and the list of items, and it calculates the maximum profit that can be obtained.

In simple terms, the code finds the best way to select items from a list, based on their profit-to-weight ratio, to maximize the total profit that can fit into a knapsack without exceeding its weight capacity.

##############################################################################################################

4)Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and bound strategy

# MAMS PROGRAM 
# 0/1 knapsack 
def knapSack(W, wt, val, n):
    dp = [0 for i in range(W+1)]  # Making the dp array
    for i in range(1, n+1):  # taking first i elements
        for w in range(W, 0, -1):  # starting from back, so that we also have data
            if wt[i-1] <= w:
                dp[w] = max(dp[w], dp[w-wt[i-1]] + val[i-1])
    return dp[W]  # returning the maximum value of knapsack

# Driver code
val = [60, 100, 120]
wt = [10, 20, 30]
W = 50
n = len(val)
print(knapSack(W, wt, val, n))

-------------------------------------------------------------------------

#  0/1 knapsack   OUR PROGRAM 
def knapsack_01(n, values, weights, W):
    dp = [[0] * (W+1) for _ in range(n+1)]

    for i in range(n+1):
        for w in range(W+1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i-1] <= w:
                dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1])
            else:
                dp[i][w] = dp[i-1][w]
    
    selected_items = []
    i, w = n, W
    while i > 0 and w > 0:
        if dp[i][w] != dp[i-1][w]:
            selected_items.append(i-1)
            w -= weights[i-1]
        i -= 1
    
    return dp[n][W], selected_items

if __name__ == "__main__":
    n = 3
    values = [60, 100, 120]
    weights = [10, 20, 30]
    W = 50

    max_value, selected_items = knapsack_01(n, values, weights, W)
    print("Maximum value:", max_value)
    print("Selected items:", selected_items)

----------------------------------------------------------------------

The provided code is for solving the 0/1 knapsack problem using dynamic programming. Let me explain it in simple terms:

**0/1 Knapsack Problem**: You are given a set of items, each with a weight and a value, and a knapsack with a maximum weight capacity. The goal is to select items to maximize the total value in the knapsack without exceeding its weight capacity. You can either take an item (1) or leave it (0), hence the name "0/1 knapsack."

Here's how the code works:

1. **knapSack Function**:
   - This function takes four parameters:
     - `W`: The maximum weight capacity of the knapsack.
     - `wt`: A list of item weights.
     - `val`: A list of item values.
     - `n`: The total number of items.
   - It returns the maximum value that can be placed in the knapsack without exceeding its capacity.

2. **Dynamic Programming Approach**:
   - The code uses dynamic programming to solve the problem. It creates a list `dp` of size `(W+1)` to store the maximum values that can be obtained for different weight capacities from 0 to `W`.
   - It iterates through the items one by one (from 1 to `n`).

3. **Nested Loop**:
   - Within the nested loops:
     - The outer loop (`for i in range(1, n+1)`) considers the first `i` items.
     - The inner loop (`for w in range(W, 0, -1)`) iterates through the weight capacities from `W` down to 1.

4. **Updating the `dp` Array**:
   - If the weight of the current item (`wt[i-1]`) is less than or equal to the current weight capacity (`w`), it checks whether it's beneficial to add the current item to the knapsack. It does this by comparing the maximum value at the current weight capacity (`dp[w]`) with the value of adding the current item (`dp[w-wt[i-1]] + val[i-1]`). If adding the item is more profitable, it updates the `dp` array with this new maximum value.

5. **Returning Maximum Value**:
   - Finally, the function returns `dp[W]`, which represents the maximum value that can be placed in the knapsack with a capacity of `W`.

In the driver code, a specific example is provided with three items of different weights and values, along with a knapsack capacity of 50. The code calculates and prints the maximum value that can be achieved in the knapsack:

```
220
```

In this example, by selecting the appropriate combination of items, you can achieve a maximum value of 220 in the knapsack without exceeding its weight capacity.


#########################################################################################################

5)Design n-Queens matrix having first Queen placed. Use backtracking to place remaining.

def solveNQueens(n: int, first_queen_col: int):
    col = set()
    posDiag = set()
    negDiag = set()
    res = []
    board = [["."] * n for _ in range(n)]

    def backtrack(r):
        if r == n:
            res.append(["".join(row) for row in board])
            return

        for c in range(n):
            if c in col or (r + c) in posDiag or (r - c) in negDiag:
                continue

            col.add(c)
            posDiag.add(r + c)
            negDiag.add(r - c)
            board[r][c] = "Q"

            backtrack(r + 1)

            col.remove(c)
            posDiag.remove(r + c)
            negDiag.remove(r - c)
            board[r][c] = "."

    col.add(first_queen_col)
    posDiag.add(0 + first_queen_col)
    negDiag.add(0 - first_queen_col)
    board[0][first_queen_col] = "Q"

    backtrack(1)  # Start with the second row
    return res

if __name__ == "__main__":
    n = 8
    first_queen_col = 1
    board = solveNQueens(n, first_queen_col)[0]
    for row in board:
        print(" ".join(row))
--------------------------------------------------------------------------

The code you provided is for solving the N-Queens problem using a backtracking algorithm. This problem is about placing N chess queens on an N×N chessboard so that no two queens threaten each other.

Here's how the code works:

1. **solveNQueens Function**:
   - This function takes two parameters:
     - `n`: The size of the chessboard (n x n).
     - `first_queen_col`: The column where the first queen is placed in the first row.
   - It returns a list of solutions, where each solution is a list of strings representing the chessboard with queens placed.

2. **Initialization**:
   - The code initializes several data structures:
     - `col`: A set to keep track of the columns where queens are placed.
     - `posDiag`: A set to keep track of the positive diagonals where queens are placed.
     - `negDiag`: A set to keep track of the negative diagonals where queens are placed.
     - `res`: An empty list to store the solutions.
     - `board`: A 2D list filled with dots (".") to represent the chessboard.

3. **backtrack Function**:
   - This is a recursive function that tries to place queens on the chessboard.
   - It takes one parameter, `r`, which represents the current row to be considered.
   - If `r` is equal to `n`, it means all queens have been successfully placed, and the current board configuration is added to the list of solutions.
   - Otherwise, it iterates through the columns (`c`) in the current row and checks if it's safe to place a queen in that cell.
   - If it's safe, the function marks the column, positive diagonal, and negative diagonal as occupied by a queen, updates the chessboard, and moves on to the next row.
   - After exploring all possible configurations for the current row, the function backtracks by removing the queen from the current cell and marking the positions as available again.

4. **Initial Queen Placement**:
   - Before starting the backtracking, the code places the first queen in the first row at the specified column (`first_queen_col`). It updates the `col`, `posDiag`, and `negDiag` sets accordingly.

5. **Backtracking Starts**:
   - The backtracking starts with the second row (row 1) because the first row already has a queen placed.

6. **Printing the Solution**:
   - In the driver code, an example is provided where `n` is set to 8 and the first queen is placed in the second column of the first row (`first_queen_col = 1`).
   - The code then calls `solveNQueens` to find and print the first solution.
   - The output is the arrangement of queens on the chessboard, where "Q" represents a queen, and dots (".") represent empty cells.

The code finds and prints one valid arrangement of queens on an 8x8 chessboard where no two queens threaten each other. It can be adapted to find multiple solutions or explore further configurations.

####################################################################################################################

6)Write a program for analysis of quick sort by using deterministic and randomized variant

import random
import timeit

def deterministic_partition(arr, low, high):
    pivot = arr[high]
    i = low - 1

    for j in range(low, high):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]

    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def randomized_partition(arr, low, high):
    pivot_index = random.randint(low, high)
    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]
    return deterministic_partition(arr, low, high)

def quick_sort(arr, low, high, pivot_selector):
    if low < high:
        pivot_index = pivot_selector(arr, low, high)
        quick_sort(arr, low, pivot_index - 1, pivot_selector)
        quick_sort(arr, pivot_index + 1, high, pivot_selector)

if __name__ == "__main__":
    arr_sizes = [100, 1000, 10000, 100000]
    for size in arr_sizes:
        arr = [random.randint(1, 1000) for _ in range(size)]
        arr.sort(reverse=True)

        deterministic_time = timeit.timeit("quick_sort(arr.copy(), 0, len(arr) - 1, deterministic_partition)",
                                        globals=globals(),
                                        number=10)
        
        randomized_time = timeit.timeit("quick_sort(arr.copy(), 0, len(arr) - 1, randomized_partition)",
                                        globals=globals(),
                                        number=10)
        
        print(f"Array size: {size}")
        print(f"Deterministic Quick Sort time: {deterministic_time:.6f} seconds")
        print(f"Randomized Quick Sort time: {randomized_time:.6f} seconds")
        print("-" * 40)

------------------------------------------------------------------

This code demonstrates the comparison between deterministic quicksort and randomized quicksort by measuring the execution time for different array sizes. Here's an explanation of the code:

1. **deterministic_partition Function**:
   - This function performs the partitioning step for quicksort. It takes three parameters:
     - `arr`: The input array to be partitioned.
     - `low`: The lower index of the subarray to be partitioned.
     - `high`: The upper index of the subarray to be partitioned.
   - It selects the pivot element as the last element in the subarray (`arr[high]`) and rearranges the elements in the subarray such that elements smaller than the pivot are moved to the left, and elements greater than or equal to the pivot are moved to the right. It returns the index of the pivot element after partitioning.

2. **randomized_partition Function**:
   - This function is a wrapper for partitioning that introduces randomness. It randomly selects a pivot element within the given subarray and then calls `deterministic_partition` with the chosen pivot.

3. **quick_sort Function**:
   - This is the main quicksort function. It takes four parameters:
     - `arr`: The input array to be sorted.
     - `low`: The lower index of the subarray to be sorted.
     - `high`: The upper index of the subarray to be sorted.
     - `pivot_selector`: A function (either `deterministic_partition` or `randomized_partition`) used to select the pivot.
   - The function implements the quicksort algorithm:
     - If `low` is less than `high`, it selects a pivot using the specified `pivot_selector`.
     - It recursively sorts the subarrays to the left and right of the pivot.
     
4. **Main Code**:
   - In the main code section, the script tests both deterministic and randomized quicksort for arrays of different sizes (100, 1000, 10000, and 100000).
   - For each array size, a random array is generated, sorted in reverse order (to ensure the worst-case scenario for quicksort), and then the sorting times are measured.
   - The `timeit` module is used to time the execution of quicksort for both deterministic and randomized partitions. The `number` parameter specifies the number of times the code is run to obtain a more accurate time measurement.

5. **Output**:
   - For each array size, the code prints the array size, execution time for deterministic quicksort, and execution time for randomized quicksort.

The purpose of this code is to compare the performance of deterministic and randomized quicksort in the worst-case scenario where the input array is sorted in reverse order. Randomized quicksort introduces randomness in pivot selection, which helps mitigate the worst-case scenario. The code's output will show how randomized quicksort performs better in such cases.


######################################################################################################################





